using System;
using System.Collections.Generic;
using System.Data;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using CommonUtils;
using MSSQLDB;
using WebSite.BackgroundPages;
using WebSite.Core;
using WebSite.Models;

namespace WebSite.Web
{
    public partial class nav_edit : ManagePage
    {
        T_NavigationUtility bll = new T_NavigationUtility();
        protected void Page_Load(Object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                LoadInit();

                if (IsEdit)
                {
                    LoadData();
                }
            }
        }
        /// <summary>
        /// 初始化
        /// </summary>
        private void LoadInit()
        {
            #region 绑定导航菜单

            parent_id.Items.Clear();
            parent_id.Items.Add(new ListItem("顶级导航", "0"));

            DataTable dt = bll.GetList();
            foreach (DataRow dr in dt.Rows)
            {
                String id = dr["id"].ToString();
                Int32 layer = Int32.Parse(dr["class_layer"].ToString());
                String title = dr["title"].ToString();
                if (layer == 1)
                {
                    parent_id.Items.Add(new ListItem(title, id));
                }
                else
                {
                    title = "├ " + title;
                    title = StringOfChar(layer - 1, "　") + title;
                    parent_id.Items.Add(new ListItem(title, id));
                }
            }

            String pid = Request["pid"];
            if (!String.IsNullOrEmpty(pid)) parent_id.SelectedValue = pid;

            #endregion

            #region 绑定操作权限类型

            Dictionary<String, String> dic = ACLHelper.ACLList();
            foreach (String key in dic.Keys)
            {
                action_type.Items.Add(new ListItem(dic[key], key));
            }

            #endregion
        }
        private String StringOfChar(Int32 strLong, String str)
        {
            String ReturnStr = "";
            for (Int32 i = 0; i < strLong; i++)
            {
                ReturnStr += str;
            }
            return ReturnStr;
        }
        /// <summary>
        /// 初始化编辑数据
        /// </summary>
        private void LoadData()
        {
            T_NavigationEntity data = bll.GetEntity(EditID);
            ViewState["data"] = data;
            this.SetFormValue(data);

            name.Attributes["ajaxurl"] = "../Plug-in/ajax.ashx?data=json&action=validate_navigation&old_name=" + HttpUtility.UrlEncode(data.Name);
            name.Focus(); //设置焦点，防止JS无法提交

            if (data.Is_Sys)
            {
                name.ReadOnly = true;
                parent_id.Enabled = false;
            }
        }

        private Int32 Layer = 0;
        /// <summary>
        /// 更新层级关系
        /// </summary>
        private void UpdateLayer(DataTable data, String ParentID)
        {
            Layer++;
            foreach (DataRow dr in data.Select("parent_id=" + ParentID))
            {
                String id = dr["id"].ToString();
                List<String> IdList = new List<String>();
                GetParentList(data, dr["parent_id"].ToString(), IdList);
                IdList.Add(id);

                dr["class_layer"] = Layer;
                dr["class_list"] = "," + String.Join(",", IdList.ToArray()) + ",";
                UpdateLayer(data, id);
            }
            Layer--;
        }
        /// <summary>
        /// 获取所有父节点ID
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="id"></param>
        /// <param name="IdList"></param>
        private void GetParentList(DataTable dt, String id, List<String> IdList)
        {
            foreach (DataRow dr in dt.Select("id=" + id))
            {
                IdList.Insert(0, dr["id"].ToString());
                GetParentList(dt, dr["parent_id"].ToString(), IdList);
            }
        }
        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSubmit_Click(Object sender, EventArgs e)
        {
            T_NavigationEntity data = (T_NavigationEntity)ViewState["data"];
            data = this.GetFormValue<T_NavigationEntity>(data);
            CmdType cmd = IsEdit ? CmdType.UPDATE : CmdType.INSERT;

            if (db.ExecuteCommand<T_NavigationEntity>(data, cmd))
            {
                if (!IsEdit) this.ClearFromValue();

                String sql = "SELECT id,title,parent_id,class_list,class_layer,class_list as list,class_layer as layer FROM [T_Navigation]";
                DataTable dt = db.ExecuteDataTable(sql);
                UpdateLayer(dt, "0");
                foreach (DataRow dr in dt.Rows)
                {
                    if (dr["class_list"].ToString() != dr["list"].ToString() ||
                        Convert.ToInt32(dr["class_layer"]) != Convert.ToInt32(dr["layer"]))
                    {
                        List<Triplet> trps = new List<Triplet>();
                        trps.Add(new Triplet("id", dr["id"], true));
                        trps.Add(new Triplet("class_list", dr["class_list"]));
                        trps.Add(new Triplet("class_layer", dr["class_layer"]));
                        bll.Update(trps);
                    }
                }

                JscriptMsg("保存成功！", "nav_list.aspx", "Success", "parent.loadMenuTree");
            }
        }

    }
}