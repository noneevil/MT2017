<p>优先级从高到底顺序为：前台进程（1进程中activity正在与用户进行交互 2进程服务被Activity调用，而且这个Activity正在与用户进行交互 3 进程服务正在执行声明周期中的回调函数，如onCreate（）、onStart（）或onDestroy（）</p><p style="text-align: center">　　4 进程的BroadcastReceiver正在执行onReceive（）函数） 可见进程（可见进程指部分程序界面能够被用户看见，却不在前台与用户交互，不响应界面事件的进程</p><p>　　如果一个进程包含服务，且这个服务正在被用户可见的Activity调用，此进程同样被视为可见进程</p><p>　　Android系统一般存在少量的可见进程，只有在特殊的情况下，Android系统才会为保证前台进程的资源而清除可见进程</p><p>　　） 服务进程（服务进程是指包含已启动服务的进程</p><p>　　没有用户界面</p><p>　　在后台长期运行</p><p>　　Android系统除非不能保证前台进程或可视进程所必要的资源，否则不强行清除服务进程） 后台进程（后台进程是指不包含任何已经启动的服务，而且没有任何用户可见的Activity的进程</p><p>　　Android系统中一般存在数量较多的后台进程，在系统资源紧张时，系统将优先清除用户较长时间没有见到的后台进程</p><p>　　） 空进程（）</p><p>　　onCreate（）</p><p>　　否</p><p>　　Activity启动后第一个被调用的函数，常用来进行Activity的初始化，例如创建View、绑定数据或恢复信息等。</p><p>　　onStart（）</p><p>　　否</p><p>　　当Activity显示在屏幕上时，该函数被调用。</p><p>　　onRestart（）</p><p>　　否</p><p>　　当Activity从停止状态进入活动状态前，调用该函数。</p><p>　　onResume（）</p><p>　　否</p><p>　　当Activity能够与用户交互，接受用户输入时，该函数被调用。此时的Activity位于Activity栈的栈顶。</p><p>　　onPause（）</p><p>　　是</p><p>　　当Activity进入暂停状态时，该函数被调用。一般用来保存持久的数据或释放占用的资源。</p><p>　　onStop（）</p><p>　　是</p><p>　　当Activity进入停止状态时，该函数被调用。</p><p>　　onDestroy（）</p><p>　　是</p><p>　　在Activity被终止前，即进入非活动状态前，该函数被调用。</p><p><br><br><br><img _src="/UpFiles/145/20111230035632477.jpg"></p><pre><br>public class ActivityLifeCycle extends Activity {<br>　　private static String TAG =&quot;LIFTCYCLE&quot;；<br>　　@Override<br>　　//完全生命周期开始时被调用，初始化Activity<br>　　public void onCreate（Bundle savedInstanceState） {<br>　　super.onCreate（savedInstanceState）；<br>　　setContentView（R.layout.main）；<br>　　Log.i（TAG， &quot;（1） onCreate（）&quot;）；<br>　　}<br>　　@Override<br>　　//可视生命周期开始时被调用，对用户界面进行必要的更改<br>　　public void onStart（） {<br>　　super.onStart（）；<br>　　i（TAG， &quot;（2） onStart（）&quot;）；<br>　　}<br>　　@Override<br>　　//在onStart（）后被调用，用于恢复onSaveInstanceState（）保存的用户界面信息<br>　　public void onRestoreInstanceState（Bundle savedInstanceState） {<br>　　super.onRestoreInstanceState（savedInstanceState）；<br>　　Log.i（TAG， &quot;（3） onRestoreInstanceState（）&quot;）；<br>　　}<br>　　@Override<br>　　//在活动生命周期开始时被调用，恢复被onPause（）停止的用于界面更新的资源<br>　　public void onResume（） {<br>　　super.onResume（）；<br>　　Log.i（TAG， &quot;（4） onResume（）&quot;）；<br>　　}<br>　　@Override<br>　　// 在onResume（）后被调用，保存界面信息<br>　　public void onSaveInstanceState（Bundle savedInstanceState） {<br>　　super.onSaveInstanceState（savedInstanceState）；<br>　　Log.i（TAG， &quot;（5） onSaveInstanceState（）&quot;）；<br>　　}<br>　　@Override<br>　　//在重新进入可视生命周期前被调用，载入界面所需要的更改信息<br>　　public void onRestart（） {<br>　　super.onRestart（）；<br>　　Log.i（TAG， &quot;（6） onRestart（）&quot;）；<br>　　}<br>　　@Override<br>　　//在活动生命周期结束时被调用，用来保存持久的数据或释放占用的资源<br>　　public void onPause（） {<br>　　super.onPause（）；<br>　　Log.i（TAG， &ldquo;（7） onPause（）&rdquo;）；、<br>　　}<br>　　@Override //在可视生命周期结束时被调用，一般用来保存持久的数据或释放占用的资源<br>　　public void onStop（） {<br>　　super.onStop（）；<br>　　Log.i（TAG， &quot;（8） onStop（）&quot;）；<br>　　}<br>　　@Override //在完全生命周期结束时被调用，释放资源，包括线程、数据连接等<br>　　public void onDestroy（） {<br>　　super.onDestroy（）；<br>　　Log.i（TAG， &quot;（9） onDestroy（）&quot;）；<br>　　}<br>　　}</pre>